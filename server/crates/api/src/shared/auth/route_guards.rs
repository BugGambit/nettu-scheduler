use actix_web::HttpRequest;
use jsonwebtoken::{decode, Algorithm, DecodingKey, Validation};
use nettu_scheduler_domain::{Account, User};
use nettu_scheduler_infra::NettuContext;
use serde::{Deserialize, Serialize};

use crate::error::NettuError;

use super::Policy;

/// JWT Claims generated by the Identity Server and describes
/// what `Policy` the `User` has and for how long.
#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct Claims {
    /// Epiration time (as UTC timestamp)
    exp: usize,
    /// Issued at (as UTC timestamp)
    iat: usize,
    /// Subject (whom token refers tok)
    user_id: String,
    /// The `Policy` that describes what `UseCase`s this `User` can perform
    scheduler_policy: Option<Policy>,
}

fn parse_authtoken_header(token_header_value: &str) -> String {
    token_header_value
        .replace("Bearer", "")
        .replace("bearer", "")
        .trim()
        .to_string()
}

pub async fn auth_user_req(
    req: &HttpRequest,
    account: &Account,
    ctx: &NettuContext,
) -> Option<(User, Policy)> {
    let token = req.headers().get("authorization");
    match token {
        Some(token) => {
            let token = match token.to_str() {
                Ok(token) => parse_authtoken_header(token),
                Err(_) => return None,
            };
            match decode_token(account, &token) {
                // In addition to checking that the request comes with a valid jwt we also
                // have to check that the user_id actually belongs to the given `Account` that
                // signed the token
                Ok(claims) => ctx
                    .repos
                    .user_repo
                    .find_by_account_id(&claims.user_id, &account.id)
                    .await
                    .map(|user| (user, claims.scheduler_policy.unwrap_or_default())),
                Err(_e) => None,
            }
        }
        None => None,
    }
}

/// Finds out which `Account` the client is associated with.
pub async fn get_client_account(req: &HttpRequest, ctx: &NettuContext) -> Option<Account> {
    match get_nettu_account_header(req) {
        Some(Ok(account_id)) => ctx.repos.account_repo.find(&account_id).await,
        _ => None,
    }
}

pub fn get_nettu_account_header(req: &HttpRequest) -> Option<Result<String, NettuError>> {
    if let Some(account_id) = req.headers().get("nettu-account") {
        let res = account_id.to_str().map(|acc| acc.to_string()).map_err(|_| {
            NettuError::UnidentifiableClient(format!(
                "Malformed nettu account header provided: {:?}",
                account_id
            ))
        });
        Some(res)
    } else {
        None
    }
}

/// Decodes the JWT token by checking if the signature matches the public
/// key provided by the `Account`
fn decode_token(account: &Account, token: &str) -> anyhow::Result<Claims> {
    let public_key_b64 = match &account.public_key_b64 {
        Some(public_key_b64) => public_key_b64,
        None => return Err(anyhow::Error::msg("Account does not support user tokens")),
    };
    let public_key = base64::decode(&public_key_b64)?;
    let decoding_key = DecodingKey::from_rsa_pem(&public_key)?;
    let claims =
        decode::<Claims>(&token, &decoding_key, &Validation::new(Algorithm::RS256))?.claims;

    Ok(claims)
}

/// Protects routes that can be accessed by authenticated `User`s.
pub async fn protect_route(
    req: &HttpRequest,
    ctx: &NettuContext,
) -> Result<(User, Policy), NettuError> {
    let account = match get_client_account(req, ctx).await {
        Some(account) => account,
        None => {
            return Err(NettuError::Unauthorized(
                "Unable to find the account the client belongs to".into(),
            ))
        }
    };
    let res = auth_user_req(req, &account, ctx).await;

    match res {
        Some(user_and_policy) => Ok(user_and_policy),
        None => Err(NettuError::Unauthorized(
            "Unable to find user from the given credentials".into(),
        )),
    }
}

/// Protects an `Account` admin route, like updating `AccountSettings`
pub async fn protect_account_route(
    req: &HttpRequest,
    ctx: &NettuContext,
) -> Result<Account, NettuError> {
    let api_key = match req.headers().get("x-api-key") {
        Some(api_key) => match api_key.to_str() {
            Ok(api_key) => api_key,
            Err(_) => {
                return Err(NettuError::Unauthorized(
                    "Malformed api key provided".to_string(),
                ))
            }
        },
        None => {
            return Err(NettuError::Unauthorized(
                "Unable to find api-key in x-api-key header".to_string(),
            ))
        }
    };

    let account = ctx.repos.account_repo.find_by_apikey(api_key).await;

    match account {
        Some(acc) => Ok(acc),
        None => Err(NettuError::Unauthorized(
            "Invalid api-key provided in x-api-key header".to_string(),
        )),
    }
}

/// Only checks which account the request is connected to.
/// If it cannot decide from the request which account the
/// client belongs to it will return `NettuError`
pub async fn protect_public_account_route(
    http_req: &HttpRequest,
    ctx: &NettuContext,
) -> Result<Account, NettuError> {
    match get_nettu_account_header(&http_req) {
        Some(res) => {
            let account_id = res?;

            match ctx.repos.account_repo.find(&account_id).await {
                Some(acc) => Ok(acc),
                None => Err(NettuError::UnidentifiableClient(
                    "Could not find out which account the client belongs to".into(),
                )),
            }
        }
        // No nettu-account header, then check if this is an admin client
        None => return protect_account_route(&http_req, &ctx).await,
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use actix_web::test::TestRequest;
    use jsonwebtoken::{encode, Algorithm, EncodingKey, Header};
    use nettu_scheduler_infra::{setup_context, ObjectId};

    async fn setup_account(ctx: &NettuContext) -> Account {
        let account = get_account();
        ctx.repos.account_repo.insert(&account).await.unwrap();
        account
    }

    fn get_token(expired: bool, user_id: String) -> String {
        let priv_key = std::fs::read("./config/test_private_rsa_key.pem").unwrap();
        let exp = if expired {
            100 // year 1970
        } else {
            5609418990073 // year 2147
        };
        let claims = Claims {
            exp,
            iat: 19,
            user_id,
            scheduler_policy: None,
        };
        let enc_key = EncodingKey::from_rsa_pem(&priv_key).unwrap();
        encode(&Header::new(Algorithm::RS256), &claims, &enc_key).unwrap()
    }

    fn get_account() -> Account {
        let pub_key = std::fs::read("./config/test_public_rsa_key.crt").unwrap();
        let public_key_b64 = base64::encode(pub_key);
        Account {
            id: ObjectId::new().to_string(),
            public_key_b64: Some(public_key_b64),
            secret_api_key: String::from("yoyo"),
            settings: Default::default(),
        }
    }

    #[actix_web::main]
    #[test]
    async fn decodes_valid_token_for_existing_user_in_account() {
        let ctx = setup_context().await;
        let account = setup_account(&ctx).await;
        let user = User::new(&account.id);
        ctx.repos.user_repo.insert(&user).await.unwrap();
        let token = get_token(false, user.id.clone());

        let req = TestRequest::with_header("nettu-account", account.id)
            .header("Authorization", format!("Bearer {}", token))
            .to_http_request();
        let res = protect_route(&req, &ctx).await;
        assert!(res.is_ok());
    }

    #[actix_web::main]
    #[test]
    async fn decodes_valid_token_and_rejects_if_user_is_in_different_account() {
        let ctx = setup_context().await;
        let account = setup_account(&ctx).await;
        let account2 = setup_account(&ctx).await;
        let user = User::new(&account2.id); // user belongs to account2
        ctx.repos.user_repo.insert(&user).await.unwrap();
        // account1 tries to sign a token with user_id that belongs to account2
        let token = get_token(false, user.id.clone());

        let req = TestRequest::with_header("nettu-account", account.id.clone())
            .header("Authorization", format!("Bearer {}", token))
            .to_http_request();
        let res = protect_route(&req, &ctx).await;
        assert!(res.is_err());
    }

    #[actix_web::main]
    #[test]
    async fn rejects_expired_token() {
        let ctx = setup_context().await;
        let account = setup_account(&ctx).await;
        let user = User::new(&account.id);
        ctx.repos.user_repo.insert(&user).await.unwrap();
        let token = get_token(true, user.id.clone());

        let req = TestRequest::with_header("nettu-account", account.id)
            .header("Authorization", format!("Bearer {}", token))
            .to_http_request();
        let res = protect_route(&req, &ctx).await;
        assert!(res.is_err());
    }

    #[actix_web::main]
    #[test]
    async fn rejects_valid_token_without_account_header() {
        let ctx = setup_context().await;
        let account = setup_account(&ctx).await;
        let user = User::new(&account.id);
        ctx.repos.user_repo.insert(&user).await.unwrap();
        let token = get_token(true, user.id.clone());

        let req = TestRequest::with_header("Authorization", format!("Bearer {}", token))
            .to_http_request();
        let res = protect_route(&req, &ctx).await;
        assert!(res.is_err());
    }

    #[actix_web::main]
    #[test]
    async fn rejects_valid_token_with_invalid_account_header() {
        let ctx = setup_context().await;
        let account = setup_account(&ctx).await;
        let user = User::new(&account.id);
        ctx.repos.user_repo.insert(&user).await.unwrap();
        let token = get_token(true, user.id.clone());

        let req = TestRequest::with_header("nettu-account", account.id + "s")
            .header("Authorization", format!("Bearer {}", token))
            .to_http_request();
        let res = protect_route(&req, &ctx).await;
        assert!(res.is_err());
    }

    #[actix_web::main]
    #[test]
    async fn rejects_garbage_token_with_valid_account_header() {
        let ctx = setup_context().await;
        let _account = setup_account(&ctx).await;
        let token = "sajfosajfposajfopaso12";

        let req = TestRequest::with_header("Authorization", format!("Bearer {}", token))
            .to_http_request();
        let res = protect_route(&req, &ctx).await;
        assert!(res.is_err());
    }

    #[actix_web::main]
    #[test]
    async fn rejects_req_without_headers() {
        let ctx = setup_context().await;
        let _account = setup_account(&ctx).await;

        let req = TestRequest::default().to_http_request();
        let res = protect_route(&req, &ctx).await;
        assert!(res.is_err());
    }
}
